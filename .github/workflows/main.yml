name: CI

on:
  push:
    branches:
      - master
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-alpha*
      - v[0-9]+.[0-9]+.[0-9]+-beta*

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Set build mode
        run: |
          BUILD_MODE='debug'
          if [[ "${GITHUB_REF}" =~ ^refs\/tags\/v* ]]; then
              BUILD_MODE='release'
          elif [[ "${GITHUB_REF}" =~ ^refs\/heads\/master$ ]]; then
              BUILD_MODE='release'
          fi
          echo "Build mode: ${BUILD_MODE}"
          echo "::set-env name=BUILD_MODE::${BUILD_MODE}"
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: "8.x"

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: "1.20.2"

      - run: flutter pub get

      - name: Build Android packages
        run: flutter build apk "--${BUILD_MODE}"

      - name: Upload Android release artifacts
        if: ${{ env.BUILD_MODE == 'release' }}
        uses: actions/upload-artifact@v1
        with:
          name: android_release
          path: "build/app/outputs/apk/release"

      - name: Upload Android debug artifacts
        if: ${{ env.BUILD_MODE == 'debug' }}
        uses: actions/upload-artifact@v1
        with:
          name: android_debug
          path: "build/app/outputs/apk/debug"

  release:
    name: Release APK
    runs-on: ubuntu-latest
    needs: build
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Generate version string
        run: echo "::set-env name=VERSION_STR::${GITHUB_REF##*/}"

      - uses: actions/download-artifact@v1
        with:
          name: android_release

      - name: Create a Release APK
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "android_release/*.apk"
          name: Release ${{ env.VERSION_STR }}
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') }}
          tag: ${{ env.VERSION_STR }}
          token: ${{ secrets.TOKEN }}
